自测不够充分，导致提测质量不高，测试没有测试用例，导致部分场景漏测。后面加强自测和测试用例。
mmp将回馈金和积分部分功能融合在了一起，为降低风险，后做了拆分。上线后半个月命中了两个潜在的问题，一是阻塞了销分的数据，后做了取数优化，二是mmp自己释放了预扣资格导致可以重复使用多倍积分资格。
通过更加主动的沟通方式，保证了项目进度。通过邀请外部团队来公司联调的方式，保证了更加高效的协作。
前端开始了任务拆解，能更准确的评估任务的时间，也能更好的控制开发的进度。在一些关键技术决策上有自己的主见，比如坚持用同样的用户id，不同的授权来实现用户身份的标识。
为了保证系统平稳过渡，增加了数据对比核对机制，采用了灰度发布。
交易组有发起code review，在review的过程中发现了10多个问题，对用户组的代码做了非正式的code review，也发现了一些问题。
交易组组织了code review，发现了一些代码的问题以及边界问题。
前端研发表现较好，输出质量较高
是否有必要考量大项目需要所产生的预计收益，提高项目收益性
耗时8个月，中间历经密钥审批挂起；产品&PM全换人；没有研发资源；下游系统临上线变卦没有ready；感谢坚持下来的人，成众人之智，用众人之力。
如涉及到大数据量迁移，不同团队的上线需求，需重视并做好流程规划。
前后端沟通，面对面交流前期不够，到联调阶段尤其凸显。2.后端开发之间沟通有的也不够，比如：活动分类和报告分类用的枚举不一致。
自测不充分，尤其是埋点。2.部分后端之间彼此依赖项关系未捋清，缺乏主动询问和沟通。
参与人员比较多，个人别团队成员团队意识不强，阻塞主流程的功能没按计划准时开发。
个别人员的bug较多，自测不充分，对测试人员响应不及时。
对接第三方系统的对接地址和mq，上线之前要在本地先验证下，避免依赖方给错地址。  2. 当大需求和常规需求提测时间冲突时，要提前预留好风险时间。
上线后对性能的压测未达标，需提前介入压测计划，制定压测标准。
交易研发主动发起code review。
新人接触复杂代码逻辑，要多看代码多交流。
测试过程中进行产品、业务验收，会耗费测试时间，更不利于工作进行。
埋点需求后期才加，产品测试+验收，容易导致缺漏，需在排期前确定需求点，测试协助验证。
产品要针对不同业务场景去体验过，能有效地避开一些坑，避免UI频繁修改。
务必保证环境可用，研发本地不要注册服务到UAT环境，保障验收不被阻碍。